#Html code:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Space invader</title> 
</head>
<body>
    <style>
        body{
            margin:0;
        }
        p{
            position : fixed;
            z-index : 10;
            color : white;
            left : 10px;
            top : 10px;
            margin : 0;
            font-family: sans-serif;
            font-size: 14px;
        }
    </style>
    <p>
        <span>Score:</span><span id="scoreEl">0</span></p>
<canvas ></canvas>
</body>
<script src="invader.js"></script>
</html>


#JavaScript code:

const scoreEl = document.querySelector('#scoreEl')
const canvas = document.querySelector('canvas')
const c = canvas.getContext('2d')

canvas.width = window.innerWidth
canvas.height = window.innerHeight
class Base{
    constructor(){
        this.position = {
            x:canvas.width/2,
            y:canvas.height
        }
        
    }
    draw(){
        c.fillRect((canvas.width/2)-50 , (canvas) ,100,50)
        c.fillStyle='yellow'
        c.stroke()
    }
}
class Player {
    constructor() {


        this.velocity = {
            x: 0,
            y: 0
        }
        this.opacity = 1
        const image = new Image()
        image.src = '/spaceship.png'
        image.onload = () => {

            const scale = 0.15
            this.image = image
            this.width = image.width * scale
            this.height = image.height * scale
            this.position = {
                x: canvas.width / 2 - this.width / 2,
                y: canvas.height - this.height - 80
            }
        }
    }

    draw() {
        c.globalAlpha = this.opacity
        if (this.image)
            c.drawImage(this.image,
                this.position.x,
                this.position.y,
                this.width,
                this.height)
    }
    update() {
        if (this.image) {
            this.draw()
            this.position.x += this.velocity.x
        }
    }
}

class Projectile {
    constructor({ position, velocity }) {
        this.position = position
        this.velocity = velocity
        this.radius = 3
    }

    draw() {
        c.beginPath()
        c.arc(this.position.x, this.position.y, this.radius, 0, Math.PI * 2)
        c.fillStyle = 'red'
        c.fill()
        c.closePath()
    }
    update() {
        this.draw()
        this.position.x += this.velocity.x
        this.position.y += this.velocity.y

    }
}

class InvaderProjectile {
    constructor({ position, velocity }) {
        this.position = position
        this.velocity = velocity
        this.width = 3
        this.height =10
    }

    draw() {
        c.fillStyle = 'white'
       c.fillRect(this.position.x , yhis.position.y , this.width , this.height)
    }
    update() {
        this.draw()
        this.position.x += this.velocity.x
        this.position.y += this.velocity.y

    }
}
const { position } = undefined || {}
class Invader {

    constructor({ position }) {

        // this.position={
        //     x:position.x,
        //     y:position.y
        // }
        this.velocity = {
            x: 0,
            y: 0
        }
        const image = new Image()
        image.src = '/invader.png'
        image.onload = () => {

            const scale = 1
            this.image = image
            this.width = image.width * scale
            this.height = image.height * scale
            this.position = {
                x: position.x,
                y: position.y
            }
        }
    }

    draw() {
        if (this.image)
            c.drawImage(this.image,
                this.position.x,
                this.position.y,
                this.width,
                this.height)
    }
    update({ velocity }) {
        if (this.image) {
            this.draw()
            this.position.x += velocity.x
            this.position.y += velocity.y
        }
    }

    shoot(invaderProjectiles){
        invaderProjectiles.push(new InvaderProjectile({
            position : {
                x: this.position.x + this.width/2,
                y: this.position.y + this.height
            },
            velocity : {
                x:0,
                y:5
            }
        }))

    }
}

class Grid {
    constructor() {
        this.position = {
            x: 0,
            y: 0
        }
        this.velocity = {
            x: 0,
            y: 0
        }

        this.invaders = [new Invader()]
        const rows = Math.floor(Math.random() * 5 + 2)
        const columns = Math.floor(Math.random() * 5 + 2)
        this.width = columns * 30
        for (let x = 0; x < columns; x++) {
            for (let y = 0; y < rows; y++) {
                this.invaders.push(
                    new Invader({
                        position: {
                            x: x * 30,
                            y: y * 30
                        }
                    }))
            }
        }
    }
    update() {
        this.position.x += this.velocity.x
        this.position.y += this.velocity.y
        this.velocity.y = 0
        if (this.position.x + this.width >= canvas.width || this.position.x <= 0) {
            this.velocity.x = -this.velocity.x
            this.velocity.y = 30
        }
    }
}

const player = new Player()
const projectiles = []
const grids = []
const invaderProjectiles = []
const keys = {
    a: {
        pressed: false
    },
    d: {
        pressed: false
    },
    space: {
        pressed: false
    }
}
player.draw()

let frames = 0
let randomInterval = Math.floor((Math.random() * 500) + 500)
let game ={
    over : false,
    active : true
}
let score = 0
function animate() {
    if(!game.active)
    return
    requestAnimationFrame(animate)
    c.fillStyle = 'black'
    c.fillRect(0, 0, canvas.width, canvas.height)

    player.update()
    invaderProjectiles.forEach((invaderProjectile , index) =>{
        if(invaderProjectile.position.y + invaderProjectile.height >= canvas.height){
            setTimeout(() => {
                projectiles.splice(index, 1)
            }, 0)  
        }
        else{
            invaderProjectile.update() 
        }
       if(invaderProjectile.position.y + invaderProjectile.height >= player.position.y && invaderProjectile.position.x + invaderProjectile.width >= player.position.x && invaderProjectile.position.x <= player.position.x + player.width){
        console.log('you lose')
        setTimeout(() => {
            invaderProjectiles.splice(index, 1)
            player.opacity = 0
            game.over = true
        }, 0)

        setTimeout(() => {
           game.active = false
        }, 2000)
       
       }
    })
    projectiles.forEach((projectile, index) => {
        if (projectile.position.y + projectile.radius <= 0) {
            setTimeout(() => {
                projectiles.splice(index, 1)
            }, 0)

        }
        else {
            projectile.update()
        }

    })

    grids.forEach((grid ,gridIndex) => {
        grid.update()
        if(frames %100 === 0 && grid.invader.length > 0){
            grid.invaders[Math.floor(Math.random() * grid.invaders.length)].shoot(invaderProjectiles)
        }
        grid.invaders.forEach((invader, i) => {
            invader.update({ velocity: grid.velocity })
            projectiles.forEach((projectiles, j) => {
                if (projectile.position.y - projectile.radius <= invader.position.y + invader.height && projectile.position.x + projectile.radius >= invader.position.x && projectile.position.x - projectile.radius <= invader.position.x + invader.width && projectile.radius >= invader.position.y) {
                    setTimeout(() => {
                        const invaderFound = grid.invaders.find(invader2 => {
                            return invader2 === invader
                        })
                        const projectileFound = projectiles.find(
                            projectile2 => projectile2 === projectile)
                        if (invaderFound && projectileFound) {
                            score += 100
                            scoreEl.innerHTML = score
                            grid.invaders.splice(i, 1)
                            projectiles.splice(j, 1)

                            if(grid.invader.length > 0 ){
                                const firstInvader = grid.invaders[0]
                                const lastInvader = grid.invaders[gridinvaders.length-1]
                                grid.width = lastInvader.position.x - firstInvader.position.x + lastInvader.width
                                grid.position.x = firstInvader.position.x

                            }
                            else{
                                grids.splice(gridIndex,1)
                            }
                        }

                    }, 0)
                }
            }
            )
        })
    })
    if (keys.a.pressed && player.position.x >= 0) {
        player.velocity.x = -10
    }
    else if (keys.d.pressed && player.position.x + player.width <= canvas.width) {
        player.velocity.x = 10
    }
    else {
        player.velocity.x = 0
    }
    if (frames % randomInterval === 0) {
        grids.push(new Grids())

        randomInterval = Math.floor((Math.random() * 500) + 500)
        frames = 0
    }

    
    frames++
}


animate()

window.addEventListener('keydown', ({ key }) => {
    if(game.over)
        return
    
    switch (key) {
        case 'a':
            console.log('left')
            keys.a.pressed = true
            break
        case 'd':
            console.log('right')
            keys.d.pressed = true
            break
        case ' ':
            console.log('space')
            projectiles.push(new Projectile({
                position: {
                    x: player.position.x + player.width / 2,
                    y: player.position.y
                },
                velocity: {
                    x: 0,
                    y: -5
                }
            }))
            break

    }
})

window.addEventListener('keyup', ({ key }) => {
    switch (key) {
        case 'a':
            console.log('left')
            keys.a.pressed = false
            break
        case 'd':
            console.log('right')
            keys.d.pressed = false
            break
        case ' ':
            console.log('space')
            break

    }
})
